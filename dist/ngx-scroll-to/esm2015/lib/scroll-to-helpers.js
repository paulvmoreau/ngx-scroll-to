import { ElementRef } from '@angular/core';
/** Default values for Component Input */
export const DEFAULTS = {
    target: null,
    action: 'click',
    duration: 650,
    easing: 'easeInOutQuad',
    offset: 0,
    offsetMap: new Map()
};
const ɵ0 = (time) => {
    return time * time;
}, ɵ1 = (time) => {
    return time * (2 - time);
}, ɵ2 = (time) => {
    return time < 0.5 ? 2 * time * time : -1 + (4 - 2 * time) * time;
}, ɵ3 = (time) => {
    return time * time * time;
}, ɵ4 = (time) => {
    return (--time) * time * time + 1;
}, ɵ5 = (time) => {
    return time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1;
}, ɵ6 = (time) => {
    return time * time * time * time;
}, ɵ7 = (time) => {
    return 1 - (--time) * time * time * time;
}, ɵ8 = (time) => {
    return time < 0.5 ? 8 * time * time * time * time : 1 - 8 * (--time) * time * time * time;
}, ɵ9 = (time) => {
    return time * time * time * time * time;
}, ɵ10 = (time) => {
    return 1 + (--time) * time * time * time * time;
}, ɵ11 = (time) => {
    return time < 0.5 ? 16 * time * time * time * time * time : 1 + 16 * (--time) * time * time * time * time;
}, ɵ12 = (time) => {
    return Math.pow(2, -10 * time) * Math.sin((time - 1 / 4) * (2 * Math.PI) / 1) + 1;
};
/** Easing Colleciton */
export const EASING = {
    easeInQuad: ɵ0,
    easeOutQuad: ɵ1,
    easeInOutQuad: ɵ2,
    easeInCubic: ɵ3,
    easeOutCubic: ɵ4,
    easeInOutCubic: ɵ5,
    easeInQuart: ɵ6,
    easeOutQuart: ɵ7,
    easeInOutQuart: ɵ8,
    easeInQuint: ɵ9,
    easeOutQuint: ɵ10,
    easeInOutQuint: ɵ11,
    easeOutElastic: ɵ12
};
/**
 * Set of allowed events as triggers
 * for the Animation to start.
 */
export const EVENTS = [
    'click',
    'mouseenter',
    'mouseover',
    'mousedown',
    'mouseup',
    'dblclick',
    'contextmenu',
    'wheel',
    'mouseleave',
    'mouseout'
];
/**
 * Strip hash (#) from value.
 *
 * @param value 				The given string value
 * @returns 					The stripped string value
 */
export function stripHash(value) {
    return value.substring(0, 1) === '#' ? value.substring(1) : value;
}
/**
 * Test if a given value is a string.
 *
 * @param value 					The given value
 * @returns 						Whether the given value is a string
 */
export function isString(value) {
    return typeof value === 'string' || value instanceof String;
}
/**
 * Test if a given Element is the Window.
 *
 * @param container 				The given Element
 * @returns 						Whether the given Element is Window
 */
export function isWindow(container) {
    return container === window;
}
/**
 * Test if a given value is of type ElementRef.
 *
 * @param value 					The given value
 * @returns               Whether the given value is a number
 */
export function isElementRef(value) {
    return value instanceof ElementRef;
}
/**
 * Whether or not the given value is a Native Element.
 *
 * @param value           The given value
 * @returns               Whether or not the value is a Native Element
 */
export function isNativeElement(value) {
    return value instanceof HTMLElement;
}
/**
 * Test if a given value is type number.
 *
 * @param value 					The given value
 * @returns 						Whether the given value is a number
 */
export function isNumber(value) {
    return !isNaN(parseFloat(value)) && isFinite(value);
}
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12 };
//# sourceMappingURL=data:application/json;base64,